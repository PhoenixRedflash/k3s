name: Integration Test Coverage
on: 
  push:
    paths-ignore:
      - "**.md"
      - "channel.yaml"
      - "install.sh"
      - "tests/snapshotter/**"
      - "tests/install/**"
      - "tests/cgroup/**"
      - ".github/**"
      - "!.github/workflows/integration.yaml"
  pull_request:
    paths-ignore:
      - "**.md"
      - "channel.yaml"
      - "install.sh"
      - "tests/snapshotter/**"
      - "tests/install/**"
      - "tests/cgroup/**"
      - ".github/**"
      - "!.github/workflows/integration.yaml"
  workflow_dispatch: {}
jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: "Make"
      run: DOCKER_BUILDKIT=1 SKIP_VALIDATE=1 make
    - name: "Upload k3s binary"
      uses: actions/upload-artifact@v2
      with:
        name: k3s
        path: dist/artifacts/k3s
    - name: Generate hashes
        shell: bash
        id: hash
        run: |
          # sha256sum generates sha256 hash for all artifacts.
          # base64 -w0 encodes to base64 and outputs on a single line.
          # sha256sum artifact1 artifact2 ... | base64 -w0
          echo "::set-output name=hashes::$(sha256sum k3s | base64 -w0)"    
  test:
    needs: build
    name: Integration Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
    - name: Install Go
      uses: actions/setup-go@v2 
      with: 
        go-version: '1.18.1'
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: "Download k3s binary"
      uses: actions/download-artifact@v2
      with:
        name: k3s
        path: ./dist/artifacts
    - name: Run Integration Tests
      run: | 
        chmod +x ./dist/artifacts/k3s
        sudo -E env "PATH=$PATH" go test ./tests/integration/... -run Integration
        go test -coverpkg=./... -coverprofile=coverage.out ./pkg/... -run Integration
        go tool cover -func coverage.out
    - name: On Failure, Launch Debug Session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 5
    - name: Upload Results To Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./coverage.out
        flags: inttests # optional
        verbose: true # optional (default = false)
  
  # This step calls the generic workflow to generate provenance.
  provenance:
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      # Upload provenance to a new release
      upload-assets: true
  
  # generate provenance https://github.com/slsa-framework/github-actions-demo      
  generate-provenance:
    needs: build
    name: Generate build provenance
    runs-on: ubuntu-latest
    steps:
      # checkout only required to run local action (defined in this repo)
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: k3s
          path: ./dist/artifacts

      - name: Generate provenance
        # use action in the root directory
        uses: slsa-framework/github-actions-demo@v0.1
        with:
          artifact_path: ./dist/artifacts/k3s

      - name: Upload provenance
        uses: actions/upload-artifact@v2
        with:
          path: build.provenance

        
